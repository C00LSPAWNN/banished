local player = game.Players.LocalPlayer
local list = {}
local interface = game.CoreGui
for i,v in pairs(game.ReplicatedStorage.Assets.Emotes:GetChildren()) do
	table.insert(list, v.Name)
end
 
function load_anim(anim_id,override)
	override = override or Enum.AnimationPriority.Action4
	local pchar=player.Character
	local AnimationId = tostring(anim_id)
	local Anim = Instance.new("Animation")
	Anim.AnimationId = AnimationId
	local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
	k.Priority=override
	k:Play()
end
 
 function stopAllAnimations()
local pchar=player.Character
	for _, track in pairs(pchar:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
		track:Stop()
	end
end



local function peanurs(txt)
	local te = require(game.ReplicatedStorage.Assets.Emotes:FindFirstChild(txt))
	local a =tostring( te.AssetID)
	stopAllAnimations()
	load_anim(a)
end


local function creator_buttons(parent,list_buttons, function_buttons, IsAutomaticSized, onlyOneFunction)
	local buttons = list_buttons

	for i,v in pairs(buttons) do
		local temp = Instance.new("TextButton",parent)
		temp.Size = UDim2.new(1,0,0.2,0)
		temp.BackgroundColor3 = Color3.fromRGB(55,55,55)
		temp.TextColor3 = Color3.fromRGB(255,255,255)
		temp.TextTransparency = 0.65
		temp.TextXAlignment = Enum.TextXAlignment.Left
		temp.TextYAlignment = Enum.TextYAlignment.Top
		temp.Text = v
		temp.TextSize = 20
		temp.TextWrapped = true
		if IsAutomaticSized then
			if IsAutomaticSized==true then
				temp.AutomaticSize = Enum.AutomaticSize.Y
			end
		end
		
			temp.MouseButton1Click:Connect(function()
				peanurs(temp.Text)
			end)

		
		temp.MouseButton1Click:Connect(function()
			if function_buttons then
				local find = function_buttons[temp.Text]
				if find then
					find()
				end
			end
		end)
	end

end

local function scroll_frame_template(frame)
	local scrollingframe = Instance.new("ScrollingFrame",frame)
	scrollingframe.Size = UDim2.new(1,0,.85,0)
	scrollingframe.BackgroundTransparency = 1
	scrollingframe.CanvasSize = UDim2.new(0,0,0,0)
	scrollingframe.ScrollBarThickness = 2
	scrollingframe.ScrollBarImageColor3 = Color3.fromRGB(255,255,255)

	local uilist = 	Instance.new("UIListLayout",scrollingframe)
	uilist.Padding = UDim.new(0,3)
	scrollingframe.AutomaticCanvasSize = Enum.AutomaticSize.Y
	scrollingframe.CanvasSize = UDim2.new(0,0,0,scrollingframe.UIListLayout.AbsoluteContentSize.Y)
	return scrollingframe
end

function closebutton(parent,closes_what, func)
	closes_what = closes_what or parent
	local hasfunction = false
	if func then
		hasfunction = true
	end
	local closebtn = Instance.new("TextButton",parent)
	closebtn.Size = UDim2.new(0.15,0,0.07,0)
	closebtn.BackgroundColor3 = Color3.fromRGB(140, 63, 64)
	closebtn.TextColor3 = Color3.fromRGB(255,255,255)
	closebtn.TextScaled = true
	closebtn.Text = "X"
	closebtn.Position = UDim2.new(1,0,-0.07,0)
	closebtn.AnchorPoint = Vector2.new(0.5,0.5)
	closebtn.MouseButton1Click:Connect(function()
		if hasfunction==true then
			func()
		end
		closes_what:Destroy()
	end)
end

local function create_template(name)
	local plrGui_ = Instance.new("ScreenGui",interface)
	plrGui_.ResetOnSpawn = false
	plrGui_.IgnoreGuiInset = trueg
	plrGui_.Name = "farting few"

	local frame = Instance.new("Frame",plrGui_)
	frame.Size = UDim2.new(0.1,0,0.25,0)
	frame.BackgroundColor3 = Color3.fromRGB(45,45,45)
	frame.Position = UDim2.new(0.5,0,0.5,0)
	frame.AnchorPoint = Vector2.new(0.5,0.5)
	frame.Active = true
	frame.Draggable = true
	frame.Name = "Skibbity"

	closebutton(frame,plrGui_)

	return frame
end

local a = create_template("Sigma")
local b = scroll_frame_template(a)


creator_buttons(b,list,nil,true,testah)
